From 57eaff4d0d66d97b9e38827bbeccf8d2570eaaba Mon Sep 17 00:00:00 2001
From: mare <yangfan@qucci.com>
Date: Tue, 7 Feb 2017 14:33:29 +0800
Subject: [PATCH 013/185] =?UTF-8?q?=E3=80=90=E9=9C=80=E6=B1=82=E3=80=91?=
 =?UTF-8?q?=E6=B7=BB=E5=8A=A0SystemUi=E7=AB=AFNavigationBar=E6=98=BE?=
 =?UTF-8?q?=E7=A4=BA=E9=9A=90=E8=97=8F=E5=8A=9F=E8=83=BD?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 .../systemui/keyguard/KeyguardViewMediator.java    |  94 ++++++++++++++++-
 .../systemui/statusbar/phone/PhoneStatusBar.java   | 113 +++++++++++++++++++--
 .../phone/StatusBarKeyguardViewManager.java        |   4 +-
 3 files changed, 203 insertions(+), 8 deletions(-)

diff --git a/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java b/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java
index 9fb26a2..9d6ecbf 100644
--- a/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java
+++ b/SystemUI/src/com/android/systemui/keyguard/KeyguardViewMediator.java
@@ -81,6 +81,17 @@ import java.util.List;
 
 import static android.provider.Settings.System.SCREEN_OFF_TIMEOUT;
 
+//add by wumin
+import java.io.FileOutputStream;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import android.content.ComponentName;
+import com.android.internal.statusbar.IStatusBarService;
+import android.os.ServiceManager;
+//add end
 /**
  * Mediates requests related to the keyguard.  This includes queries about the
  * state of the keyguard, power management events that effect whether the keyguard
@@ -134,7 +145,10 @@ public class KeyguardViewMediator extends SystemUI {
 
     private static final String DELAYED_KEYGUARD_ACTION =
         "com.android.internal.policy.impl.PhoneWindowManager.DELAYED_KEYGUARD";
-
+    //add by wumin
+    private static final String PERSIST_NAVIGATION_BAR = "persist.sys.navg_bar_visible";
+    private static final String GF_MODE = "/sys/bus/spi/devices/spi0.0/gf_mode/gf_mode";
+    //add end
     // used for handler messages
     private static final int SHOW = 2;
     private static final int HIDE = 3;
@@ -628,6 +642,12 @@ public class KeyguardViewMediator extends SystemUI {
             mSystemReady = true;
             doKeyguardLocked(null);
             mUpdateMonitor.registerCallback(mUpdateCallback);
+            
+    	    //4 lines add by wumin
+    	    if(!isNavigationEnable()){
+                	writeFile(GF_MODE,"0");
+    	    }
+    	    //add end
         }
         // Most services aren't available until the system reaches the ready state, so we
         // send it here when the device first boots.
@@ -785,11 +805,33 @@ public class KeyguardViewMediator extends SystemUI {
     public void onScreenTurnedOn() {
         notifyScreenTurnedOn();
         mUpdateMonitor.dispatchScreenTurnedOn();
+        
+	    //this log add by wumin
+		Log.d(TAG,"onScreenTurnedOn");
+		if(mLockPatternUtils.isLockScreenDisabled(
+	                KeyguardUpdateMonitor.getCurrentUser()) || shouldWaitForProvisioning() || (!mShowing)){
+		    if(!isNavigationEnable()){
+	                writeFile(GF_MODE,"0");
+		    }
+		}else if(mLockPatternUtils.isSecure(KeyguardUpdateMonitor.getCurrentUser()) && mShowing && mOccluded){
+	                writeFile(GF_MODE,"0");
+		}        
     }
 
     public void onScreenTurnedOff() {
         notifyScreenTurnedOff();
         mUpdateMonitor.dispatchScreenTurnedOff();
+        
+	    //this log add by wumin
+		Log.d(TAG,"onScreenTurnedOn");
+		if(mLockPatternUtils.isLockScreenDisabled(
+	                KeyguardUpdateMonitor.getCurrentUser()) || shouldWaitForProvisioning() || (!mShowing)){
+		    if(!isNavigationEnable()){
+	                writeFile(GF_MODE,"0");
+		    }
+		}else if(mLockPatternUtils.isSecure(KeyguardUpdateMonitor.getCurrentUser()) && mShowing && mOccluded){
+	                writeFile(GF_MODE,"0");
+		}
     }
 
     private void maybeSendUserPresentBroadcast() {
@@ -978,6 +1020,12 @@ public class KeyguardViewMediator extends SystemUI {
                 mStatusBarKeyguardViewManager.setOccluded(isOccluded);
                 updateActivityLockScreenState();
                 adjustStatusBarLocked();
+        		//add by wumin
+                if(!isNavigationEnable() && isOccluded){
+    	            writeFile(GF_MODE,"0");
+                }else if(!isNavigationEnable() && !isOccluded){
+    	            writeFile(GF_MODE,"1");
+		        }
             }
         }
     }
@@ -1509,6 +1557,11 @@ public class KeyguardViewMediator extends SystemUI {
             updateActivityLockScreenState();
             adjustStatusBarLocked();
             sendUserPresentBroadcast();
+    	    //add by wumin
+    	    if(!isNavigationEnable()){
+    	    	writeFile(GF_MODE,"0");
+    	    }
+    	    //add end            
         }
     }
 
@@ -1739,4 +1792,43 @@ public class KeyguardViewMediator extends SystemUI {
             }
         }
     }
+
+	// add by wumin
+	public void writeFile(String fileName, String write_str) {
+		File file = new File(fileName);
+		try {
+			FileOutputStream fos = new FileOutputStream(file);
+			byte[] bytes = write_str.getBytes();
+			fos.write(bytes);
+			fos.close();
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+	}
+
+	private boolean isNavigationEnable() {
+		if (SystemProperties.getBoolean(PERSIST_NAVIGATION_BAR, false)) {
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	private String readFile(String fileName) {
+		String res = "";
+		File file = new File(fileName);
+		try {
+			FileInputStream fis = new FileInputStream(file);
+			int length = fis.available();
+			byte[] buffer = new byte[length];
+			fis.read(buffer);
+			res = new String(buffer);
+			// res = EncodingUtils.getString(buffer, "UTF-8");
+			fis.close();
+		} catch (Exception e) {
+			e.printStackTrace();
+		}
+
+		return res;
+	}    
 }
diff --git a/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java b/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
index 538d95c..ddebe09 100644
--- a/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
+++ b/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
@@ -184,7 +184,16 @@ import static com.android.systemui.statusbar.phone.BarTransitions.MODE_SEMI_TRAN
 import static com.android.systemui.statusbar.phone.BarTransitions.MODE_TRANSLUCENT;
 import static com.android.systemui.statusbar.phone.BarTransitions.MODE_TRANSPARENT;
 import static com.android.systemui.statusbar.phone.BarTransitions.MODE_WARNING;
-
+//add by wumin
+import java.io.FileOutputStream;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+
+import android.os.SystemProperties;
+//add end
 public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
         DragDownHelper.DragDownCallback, ActivityStarter, OnUnlockMethodChangedListener,
         HeadsUpManager.OnHeadsUpChangedListener {
@@ -197,7 +206,20 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
     public static final boolean DEBUG_MEDIA_FAKE_ARTWORK = false;
 
     public static final boolean DEBUG_WINDOW_STATE = false;
-
+    // hsp 2016-08-11 : Add button to show or hide navigatin bar @{
+    private static final String PERSIST_NAVIGATION_BAR = "persist.sys.navg_bar_visible";
+    private static final String ACTION_NAVIGATION_BAR_VISIBLE = "action_navigation_bar_visible";
+    // @}
+    //add by wumin
+    private boolean showNavBar = true;
+    private boolean LastTimeShowNavBar = true;
+    private long mLastTime = 0;
+    private long showOrHideNavBarTime = 0;
+    private static final String GF_MODE = "/sys/bus/spi/devices/spi0.0/gf_mode/gf_mode";
+    private boolean isSettings = false;
+    private boolean isFpTouchMode;
+    private boolean isBroadcastAction = false;
+    //add end
     // additional instrumentation for testing purposes; intended to be left on during development
     public static final boolean CHATTY = DEBUG;
 
@@ -700,7 +722,35 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
 
         mScreenPinningRequest = new ScreenPinningRequest(mContext);
     }
+    // hsp 2016-08-11 : Add button to show or hide navigatin bar @{
+    private void hideNavigationBar() {
+        if (mNavigationBarView == null) {
+            return;
+        }
+        mWindowManager.removeView(mNavigationBarView);
+        mNavigationBarView = null;
+    }
 
+    private void showNavigationBar() {
+        // If we have no Navbar view, we should have one, create it
+        if (mNavigationBarView == null) {
+            mNavigationBarView = (NavigationBarView) View.inflate(mContext, R.layout.navigation_bar, null);
+        }
+
+        mNavigationBarView.setDisabledFlags(mDisabled1);
+        mNavigationBarView.setBar(this);
+        addNavigationBar(); // dynamically adding nav bar, reset System UI visibility!
+
+        //hsp : When first time use the phone, will not go into keyguard, and didn't set barstate,
+        //so we should set here, to notification panel that we have into launcher
+        int updateBarState = Settings.System.getInt(mContext.getContentResolver(), "update_bar_state_first_time", 0);
+        if (updateBarState == 0) {
+            setBarState(StatusBarState.SHADE);
+            mNotificationPanel.setBarState(StatusBarState.SHADE, mKeyguardFadingAway, false);
+            Settings.System.putInt(mContext.getContentResolver(), "update_bar_state_first_time", 1);
+        }
+    }
+    // @}
     // ================================================================================
     // Constructing the view
     // ================================================================================
@@ -998,6 +1048,9 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
         filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
         filter.addAction(Intent.ACTION_SCREEN_OFF);
         filter.addAction(Intent.ACTION_SCREEN_ON);
+        // hsp 2016-08-11 : Add button to show or hide navigatin bar
+        filter.addAction(ACTION_NAVIGATION_BAR_VISIBLE);
+        filter.addAction(Intent.ACTION_LOCALE_CHANGED);
         context.registerReceiverAsUser(mBroadcastReceiver, UserHandle.ALL, filter, null, null);
 
         IntentFilter demoFilter = new IntentFilter();
@@ -1199,7 +1252,9 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
         mNavigationBarView.getBackButton().setLongClickable(true);
         mNavigationBarView.getBackButton().setOnLongClickListener(mLongPressBackRecentsListener);
         mNavigationBarView.getHomeButton().setOnTouchListener(mHomeActionListener);
-        mNavigationBarView.getHomeButton().setOnLongClickListener(mLongPressHomeListener);
+        //hsp 2016-09-27 : We should intecept long press home key event in
+        //PhoneWindoeManager#interceptKeyBeforeDispatching but here
+        //mNavigationBarView.getHomeButton().setOnLongClickListener(mLongPressHomeListener);
         mAssistManager.onConfigurationChanged();
     }
 
@@ -1207,10 +1262,15 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
     private void addNavigationBar() {
         if (DEBUG) Log.v(TAG, "addNavigationBar: about to add " + mNavigationBarView);
         if (mNavigationBarView == null) return;
-
+        // hsp 2016-08-11 : Add button to show or hide navigatin bar @{
+        if (!SystemProperties.getBoolean(PERSIST_NAVIGATION_BAR, false)) {
+            return;
+        }
+        // @}
         prepareNavigationBarView();
 
         mWindowManager.addView(mNavigationBarView, getNavigationBarLayoutParams());
+    	checkBarModes();
     }
 
     private void repositionNavigationBar() {
@@ -3019,6 +3079,36 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
             }
         }, cancelAction, afterKeyguardGone);
     }
+    //add by wumin
+    private Runnable mRemoveOrShowNavBar = new Runnable() {
+        public synchronized void run() {
+            if (showNavBar) {
+                if (!mWindowManager.findView(mNavigationBarView)) {
+                    showNavigationBar();
+                    writeFile(GF_MODE, "1");
+                }
+            } else if (!showNavBar) {
+                if (mWindowManager.findView(mNavigationBarView)) {
+                    hideNavigationBar();
+                    writeFile(GF_MODE, "0");
+                }
+            }
+        }
+    };
+
+    private void writeFile(String fileName, String write_str) {
+        File file = new File(fileName);
+        try {
+            FileOutputStream fos = new FileOutputStream(file);
+            byte[] bytes = write_str.getBytes();
+            fos.write(bytes);
+            fos.close();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    //add end
 
     private BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {
         public void onReceive(Context context, Intent intent) {
@@ -3039,9 +3129,20 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,
                 notifyHeadsUpScreenOff();
                 finishBarAnimations();
                 resetUserExpandedStates();
-            }
-            else if (Intent.ACTION_SCREEN_ON.equals(action)) {
+            } else if (Intent.ACTION_SCREEN_ON.equals(action)) {
                 notifyNavigationBarScreenOn(true);
+
+            }
+         // hsp 2016-08-11 : Add button to show or hide navigatin bar @{
+            else if (ACTION_NAVIGATION_BAR_VISIBLE.equals(action)) {                    //add by wumin
+                    boolean show = intent.getBooleanExtra("show", false);
+                    boolean settings = intent.getBooleanExtra("settings", false);
+                    showNavBar = show;
+                    isSettings = settings;
+                    if (isSettings) {
+                        mRemoveOrShowNavBar.run();
+                    }
+                //add end
             }
         }
     };
diff --git a/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarKeyguardViewManager.java b/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarKeyguardViewManager.java
index 05f6e57..8a79169 100644
--- a/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarKeyguardViewManager.java
+++ b/SystemUI/src/com/android/systemui/statusbar/phone/StatusBarKeyguardViewManager.java
@@ -419,7 +419,9 @@ public class StatusBarKeyguardViewManager {
     private Runnable mMakeNavigationBarVisibleRunnable = new Runnable() {
         @Override
         public void run() {
-            mPhoneStatusBar.getNavigationBarView().setVisibility(View.VISIBLE);
+            if(mPhoneStatusBar.getNavigationBarView() != null){
+                mPhoneStatusBar.getNavigationBarView().setVisibility(View.VISIBLE);
+            }
         }
     };
 
-- 
2.8.3.windows.1

