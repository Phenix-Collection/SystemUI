From 023abcd27342a21bb046b8502eed6f789cc1d153 Mon Sep 17 00:00:00 2001
From: LRH <yangfan@qucci.com>
Date: Wed, 15 Feb 2017 19:22:20 +0800
Subject: [PATCH 041/185] =?UTF-8?q?=E3=80=90=E6=95=85=E9=9A=9C=E3=80=91?=
 =?UTF-8?q?=E8=BF=9B=E5=85=A5=E7=9B=B8=E6=9C=BA=EF=BC=8C=E4=B8=8B=E6=BB=91?=
 =?UTF-8?q?=E7=8A=B6=E6=80=81=E6=A0=8F=EF=BC=8C=E5=BC=80=E5=90=AF=E6=89=8B?=
 =?UTF-8?q?=E7=94=B5=E7=AD=92=E8=A7=82=E5=AF=9F=EF=BC=8C=E4=B8=8E=E9=9D=99?=
 =?UTF-8?q?=E9=9F=B3=E6=8C=89=E9=92=AE=E9=87=8D=E5=8F=A0?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 .../src/com/android/systemui/qs/tiles/FlashlightTile.java  |  3 +++
 .../systemui/statusbar/policy/FlashlightController.java    | 14 +++++++++++++-
 2 files changed, 16 insertions(+), 1 deletion(-)

diff --git a/SystemUI/src/com/android/systemui/qs/tiles/FlashlightTile.java b/SystemUI/src/com/android/systemui/qs/tiles/FlashlightTile.java
index 21cbef2..183d6f4 100644
--- a/SystemUI/src/com/android/systemui/qs/tiles/FlashlightTile.java
+++ b/SystemUI/src/com/android/systemui/qs/tiles/FlashlightTile.java
@@ -63,6 +63,9 @@ public class FlashlightTile extends QSTile<QSTile.BooleanState> implements
         if (ActivityManager.isUserAMonkey()) {
             return;
         }
+        if(mFlashlightController.isCameraOpen()){
+        	return;
+        }
         MetricsLogger.action(mContext, getMetricsCategory(), !mState.value);
         boolean newState = !mState.value;
         refreshState(newState ? UserBoolean.USER_TRUE : UserBoolean.USER_FALSE);
diff --git a/SystemUI/src/com/android/systemui/statusbar/policy/FlashlightController.java b/SystemUI/src/com/android/systemui/statusbar/policy/FlashlightController.java
index 29a8f67..2715f30 100644
--- a/SystemUI/src/com/android/systemui/statusbar/policy/FlashlightController.java
+++ b/SystemUI/src/com/android/systemui/statusbar/policy/FlashlightController.java
@@ -181,13 +181,24 @@ public class FlashlightController {
         }
     }
 
-    private final CameraManager.TorchCallback mTorchCallback =
+    private boolean isCameraOpen = false;
+    
+    public boolean isCameraOpen() {
+		return isCameraOpen;
+	}
+
+	public void setCameraOpen(boolean isCameraOpen) {
+		this.isCameraOpen = isCameraOpen;
+	}
+
+	private final CameraManager.TorchCallback mTorchCallback =
             new CameraManager.TorchCallback() {
 
         @Override
         public void onTorchModeUnavailable(String cameraId) {
             if (TextUtils.equals(cameraId, mCameraId)) {
                 setCameraAvailable(false);
+                setCameraOpen(true);
             }
         }
 
@@ -196,6 +207,7 @@ public class FlashlightController {
             if (TextUtils.equals(cameraId, mCameraId)) {
                 setCameraAvailable(true);
                 setTorchMode(enabled);
+                setCameraOpen(false);
             }
         }
 
-- 
2.8.3.windows.1

